name: Build and Test

run-name: "${{ github.event.head_commit.timestamp }} - ${{ github.event.head_commit.id }}: ${{ github.event.head_commit.message }}" 

on:
  push:
  pull_request:
  release:
    types: [published, prereleased]
  workflow_dispatch:
  schedule: # regression testing
    - cron: '0 2 * * 0'  # Weekly on Sunday at 2 AM UTC

jobs:
  # Check if workflow should run and determine platforms
  check-should-run:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
      platforms: ${{ steps.determine-platforms.outputs.platforms }}
    steps:
      - name: Check if workflow should run
        id: check
        run: |
          SHOULD_RUN="false"
          
          # Always run for schedule, workflow_dispatch, and release events
          if [[ "${{ github.event_name }}" == "schedule" || "${{ github.event_name }}" == "workflow_dispatch" || "${{ github.event_name }}" == "release" ]]; then
            SHOULD_RUN="true"
          # Check for any CI build tags using GitHub's contains function
          elif [[ "${{ contains(github.event.head_commit.message, '[ci-build]') }}" == "true" ]] || \
               [[ "${{ contains(github.event.head_commit.message, '[ci-build-ubuntu]') }}" == "true" ]] || \
               [[ "${{ contains(github.event.head_commit.message, '[ci-build-linux]') }}" == "true" ]] || \
               [[ "${{ contains(github.event.head_commit.message, '[ci-build-windows]') }}" == "true" ]] || \
               [[ "${{ contains(github.event.head_commit.message, '[ci-build-macos]') }}" == "true" ]]; then
            SHOULD_RUN="true"
          fi
          
          echo "should-run=$SHOULD_RUN" >> $GITHUB_OUTPUT
          echo "Should run workflow: $SHOULD_RUN"
      
      - name: Determine platforms to build
        id: determine-platforms
        if: steps.check.outputs.should-run == 'true'
        run: |
          PLATFORMS='[]'  # Default to empty array to prevent fromJson errors
          
          # Always build all platforms for schedule, workflow_dispatch, and release events
          if [[ "${{ github.event_name }}" == "schedule" || "${{ github.event_name }}" == "workflow_dispatch" || "${{ github.event_name }}" == "release" ]]; then
            PLATFORMS='["linux", "windows", "macos"]'
          elif [[ "${{ contains(github.event.head_commit.message, '[ci-build]') }}" == "true" ]]; then
            # Build all platforms
            PLATFORMS='["linux", "windows", "macos"]'
          else
            # Check for individual platform tags and build selected platforms
            SELECTED_PLATFORMS=()
            
            if [[ "${{ contains(github.event.head_commit.message, '[ci-build-ubuntu]') }}" == "true" ]] || \
               [[ "${{ contains(github.event.head_commit.message, '[ci-build-linux]') }}" == "true" ]]; then
              SELECTED_PLATFORMS+=("linux")
            fi
            
            if [[ "${{ contains(github.event.head_commit.message, '[ci-build-windows]') }}" == "true" ]]; then
              SELECTED_PLATFORMS+=("windows")
            fi
            
            if [[ "${{ contains(github.event.head_commit.message, '[ci-build-macos]') }}" == "true" ]]; then
              SELECTED_PLATFORMS+=("macos")
            fi
            
            # Convert array to proper JSON array
            if [ ${#SELECTED_PLATFORMS[@]} -gt 0 ]; then
              JSON_ARRAY="["
              for i in "${!SELECTED_PLATFORMS[@]}"; do
                if [ $i -gt 0 ]; then
                  JSON_ARRAY+=","
                fi
                JSON_ARRAY+="\"${SELECTED_PLATFORMS[$i]}\""
              done
              JSON_ARRAY+="]"
              PLATFORMS="$JSON_ARRAY"
            fi
          fi
          
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "Selected platforms: $PLATFORMS"

  # Build complete pipeline for each platform independently
  build:
    needs: check-should-run
    if: needs.check-should-run.outputs.should-run == 'true' && needs.check-should-run.outputs.platforms != '[]'
    strategy:
      matrix:
        platform: ${{ fromJson(needs.check-should-run.outputs.platforms) }}
      fail-fast: false  # Allow other platforms to continue even if one fails
    runs-on: ${{ matrix.platform == 'linux' && 'ubuntu-latest' || matrix.platform == 'windows' && 'windows-latest' || 'macos-latest' }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup dependencies
      uses: ./.github/actions/setup-dependencies
      with:
        platform: ${{ matrix.platform }}
    
    - name: Build madronalib
      uses: ./.github/actions/build-madronalib
      with:
        platform: ${{ matrix.platform }}
    
    - name: Build mlvg
      uses: ./.github/actions/build-mlvg
      with:
        platform: ${{ matrix.platform }}
    
    - name: Test madronalib
      uses: ./.github/actions/test-madronalib
      with:
        platform: ${{ matrix.platform }}
      continue-on-error: true
    
    - name: Test mlvg
      uses: ./.github/actions/test-mlvg
      with:
        platform: ${{ matrix.platform }}